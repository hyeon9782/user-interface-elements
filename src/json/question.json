[
  {
    "id": 0,
    "question": "Task Queue와 Web API는 이벤트 루프와 어떻게 연관되어 있나요?",
    "answer": "이벤트루프의 주 역할이 콜스택과 태스크큐가 비어있는지를 지속적으로 확인하는 것입니다. 콜스택에서 비동기함수가 Web API로 이동하게 되고 Web API를 통해 백그라운드에서 실행하게 되며 비동기 처리가 끝난 후 Task Queue에 넣어집니다."
  },
  {
    "id": 1,
    "question": "자바스크립트 비동기 처리에서 마이크로 테스크와 매크로 테스크의 차이는 무엇일까요?",
    "answer": "매크로 테스크는 이벤트 루프의 큰 루프 사이클 중에 처리되는 작업입니다. 주로 사용자 인터렉션과 관련된 이벤트 핸들링이 여기에 속합니다. 브라우저에서 클릭, 키보드 입력과 같은 사용자 동작이 발생할 때 해당 작업이 매크로 테스크 큐로 들어가게 되어 이벤트 루프가 실행될 때 처리됩니다. 마이크로 테스크는 매크로 테스크보다 더 높은 우선순위를 가지고 있어, 현재 실행 중인 태스크가 끝난 직후에 처리됩니다. 주로 Promise와 관련이 있어서, Promise의 후속 처리 then, catch 등이 마이크로 테스크로 처리돼 비동기적인 작업을 보장하게됩니다. 요약하자면 매크로 테스크는 이벤트 루프 주기에 따라 처리되고, 마이크로 테스크는 현재 태스크가 완료된 직후에 처리됩니다."
  },
  {
    "id": 2,
    "question": "이벤트 루프는 어떻게 동작하나요?",
    "answer": "자바스크립트는 싱글스레드 언어이지만 이벤트루프를 통해 비동기 작업이 가능하게 됩니다. 자바스크립트 엔진은 코드를 위에서 아래로 실행하며 동기적인 코드들이 콜 스텍에 쌓이며 즉시 실행 됩니다. 이 과정에서 비동기 함수가 호출되면 그 함수는 콜백 큐에 넣어집니다. 현재 실행중인 콜백큐에서 가장 먼저 들어온 콜백함수를 콜 스택으로 옮겨서 실행합니다. 이런 구조로 비동기적으로 작업을 처리할 수 있습니다."
  },
  {
    "id": 3,
    "question": "Web Workers는 무엇이며, 어떻게 동기/비동기 문제를 해결하는데 도움을 주나요?",
    "answer": "Web Workers는 병렬 처리를 가능하게 하는 Javascript에서의 API이며 스레드에서 독립적으로 실행되는 스크립트를 생성합니다. 이는 브라우저가 동작을 멈추지 않아서 시간이 오래 소요되는 작업을 진행할 수 있습니다."
  }
]
